AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Flight Search Bot Serverless Application

Parameters:
  Stage:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    Description: Deployment stage

  ConfigBucketName:
    Type: String
    Description: Name of the S3 bucket to store configuration

  TelegramBotToken:
    Type: String
    Description: Telegram Bot Token
    NoEcho: true

  TelegramChatId:
    Type: String
    Description: Telegram Chat ID

  AmadeusClientId:
    Type: String
    Description: Amadeus Client ID
    NoEcho: true

  AmadeusClientSecret:
    Type: String
    Description: Amadeus Client Secret
    NoEcho: true

Globals:
  Function:
    Timeout: 300
    MemorySize: 256
    Runtime: python3.9
    Environment:
      Variables:
        CONFIG_BUCKET: !Ref ConfigBucketName
        STAGE: !Ref Stage

Resources:
  InteractiveSearchFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::${ConfigBucketName}"
                  - !Sub "arn:aws:s3:::${ConfigBucketName}/*"
        - PolicyName: CloudWatchLogsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  InteractiveSearchFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          def handler(event, context):
              return {
                  'statusCode': 200,
                  'body': 'Hello from Lambda!'
              }
      Handler: index.handler
      Role: !GetAtt InteractiveSearchFunctionRole.Arn
      Runtime: python3.9
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          TELEGRAM_BOT_TOKEN: !Ref TelegramBotToken
          TELEGRAM_CHAT_ID: !Ref TelegramChatId
          AMADEUS_CLIENT_ID: !Ref AmadeusClientId
          AMADEUS_CLIENT_SECRET: !Ref AmadeusClientSecret

  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      Cors:
        AllowMethods: "'POST,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
        AllowOrigin: "'*'"
      DefinitionBody:
        openapi: '3.0.1'
        info:
          title: Flight Search Bot API
          version: '1.0'
        paths:
          /webhook:
            post:
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${InteractiveSearchFunction.Arn}/invocations"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
              responses:
                '200':
                  description: '200 response'
                  content:
                    application/json:
                      schema:
                        type: object
              x-amazon-apigateway-request-validators:
                basic:
                  validateRequestBody: true
                  validateRequestParameters: true

  ApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref InteractiveSearchFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayApi}/*/*/*"

Outputs:
  TelegramWebhookUrl:
    Description: Webhook URL for Telegram bot
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/webhook"

  ConfigBucketName:
    Description: Name of the S3 bucket containing configuration
    Value: !Ref ConfigBucketName 